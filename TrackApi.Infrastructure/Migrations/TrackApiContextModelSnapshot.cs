// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrackApi.Infrastructure.Context;

#nullable disable

namespace TrackApi.Infrastructure.Migrations
{
    [DbContext(typeof(TrackApiContext))]
    partial class TrackApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrackItApi.Domain.Models.Goal", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("ID");

                    b.HasIndex("PlanId");

                    b.ToTable("Goals", (string)null);
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Job", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentJobId")
                        .HasColumnType("bigint");

                    b.Property<int>("Prioritylevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("ID");

                    b.HasIndex("GoalId");

                    b.HasIndex("ParentJobId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.JobTag", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("JobId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("JobTags", (string)null);
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Plan", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ParentPlanId")
                        .HasColumnType("bigint");

                    b.Property<int>("PlanType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("ParentPlanId");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Tag", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("ID");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Goal", b =>
                {
                    b.HasOne("TrackItApi.Domain.Models.Plan", "Plan")
                        .WithMany("Goals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Job", b =>
                {
                    b.HasOne("TrackItApi.Domain.Models.Goal", "Goal")
                        .WithMany("Jobs")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackItApi.Domain.Models.Job", "ParentJob")
                        .WithMany("ChildJobs")
                        .HasForeignKey("ParentJobId");

                    b.Navigation("Goal");

                    b.Navigation("ParentJob");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.JobTag", b =>
                {
                    b.HasOne("TrackItApi.Domain.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrackItApi.Domain.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Plan", b =>
                {
                    b.HasOne("TrackItApi.Domain.Models.Plan", "ParentPlan")
                        .WithMany("ChildPlans")
                        .HasForeignKey("ParentPlanId");

                    b.Navigation("ParentPlan");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Goal", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Job", b =>
                {
                    b.Navigation("ChildJobs");
                });

            modelBuilder.Entity("TrackItApi.Domain.Models.Plan", b =>
                {
                    b.Navigation("ChildPlans");

                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
